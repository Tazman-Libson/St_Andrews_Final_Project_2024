#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
l <- 0 #log likelihood
for(i in 2:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
return(-l)
}
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
l <- 0 #log likelihood
for(i in 1:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
return(-l)
}
nlm_mod
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
#Checking if aT *1 is equal to the likelihood
log(exp(Lt)%*%c(1,1,1))
Lt <- mvn.lforward(mod = nlm_mod, x = tmatrix)[100,]
#Checking if aT *1 is equal to the likelihood
log(exp(Lt)%*%c(1,1,1))
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID %*% mvn.p_matrix(mod, X[1,])
u <- sum(phi)
l <- log(u) #log likelihood
for(i in 2:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
return(-l)
}
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
#Computing log backward probabilities
mvn.lbackward<-function(x,mod)
{
lenx          <- dim(x)[1]
m          <- dim(mod$TPM)[1]
lbeta      <- matrix(NA,ncol = m,nrow = lenx)
lbeta[lenx,]  <- rep(0,m)
foo        <- rep(1/m,m)
lscale     <- log(m)
for (i in (lenx-1):1)
{
foo        <- mod$TPM%*%mvn.p_matrix(mod, x[i+1,])%*%foo
lbeta[i,]  <- log(foo)+lscale
sumfoo     <- sum(foo)
foo        <- foo/sumfoo
lscale     <- lscale+log(sumfoo)
}
return(lbeta)
}
#Checking if aT *1 is equal to the likelihood
log(exp(Lt)%*%c(1,1,1))
#Function for state_dependent distribution probability matrix
#Inputs:
#mod <- list as described above
#X <- vector of legnth n with the observations at a single time
#Outputs:
#an m x m diagnonal matrix with the marginal probability for each state-dependent distribtion
mvn.p_matrix <- function(mod, X){
mvn <- function(m){
sig <- mod$VCV[,,m]
means <- mod$MEANS[m,]
return(dmvnorm(X, mean = means, sigma = sig, checkSymmetry = F))
}
m <- dim(mod$TPM)[1]
probs <- lapply(1:m, mvn)
return(diag(probs))
}
#Function for state_dependent distribution probability matrix
#Inputs:
#mod <- list as described above
#X <- vector of legnth n with the observations at a single time
#Outputs:
#an m x m diagnonal matrix with the marginal probability for each state-dependent distribtion
mvn.p_matrix <- function(mod, X){
mvn <- function(m){
sig <- mod$VCV[,,m]
means <- mod$MEANS[m,]
return(dmvnorm(X, mean = means, sigma = sig, checkSymmetry = F))
}
m <- dim(mod$TPM)[1]
probs <- lapply(1:m, mvn)
return(diag(probs))
}
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
u <- sum(phi)
l <- 0 #log likelihood
for(i in 1:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
return(-l)
}
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
u <- sum(phi)
l <- 0 #log likelihood
forw <- matrix(nrow = t, ncol =1 )
for(i in 1:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
forw[i,] <- v
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
return(-l)
}
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
u <- sum(phi)
l <- 0 #log likelihood
forw <- matrix(nrow = t, ncol =1 )
for(i in 1:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
forw[i,] <- v
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
print(forw)
return(-l)
}
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
u <- sum(phi)
l <- 0 #log likelihood
forw <- matrix(nrow = t, ncol =dim(mod$TPM)[1] )
for(i in 1:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
forw[i,] <- v
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
print(forw)
return(-l)
}
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
Lt <- mvn.lforward(mod = nlm_mod, x = tmatrix)
View(Lt)
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
u <- sum(phi)
l <- 0 #log likelihood
forw <- matrix(nrow = t, ncol =dim(mod$TPM)[1] )
for(i in 1:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
forw[i,] <- v
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
print(log(forw))
return(-l)
}
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
# log forward probabilities
#framework from Hidden Markov Models for Time Series: An Introduction Using R
mvn.lforward<-function(x, mod){
m <- dim(mod$TPM)[1]
lenx <- dim(x)[1] #number of observations
lalpha        <- matrix(NA,ncol = m, nrow = lenx)
foo           <- mod$ID %*% mvn.p_matrix(mod, X = x[1,])
sumfoo        <- sum(foo)
lscale        <- log(sumfoo)
foo           <- foo/sumfoo
lalpha[1,]    <- lscale+log(foo)
for (i in 2:(lenx-1))
{
foo          <- foo%*%mod$TPM %*% mvn.p_matrix(mod, X = x[i,])
sumfoo       <- sum(foo)
lscale       <- lscale+log(sumfoo)
foo          <- foo/sumfoo
lalpha[i,]   <- log(foo)+lscale
}
return(lalpha)
}
# log forward probabilities
#framework from Hidden Markov Models for Time Series: An Introduction Using R
mvn.lforward<-function(x, mod){
m <- dim(mod$TPM)[1]
lenx <- dim(x)[1] #number of observations
lalpha        <- matrix(NA,ncol = m, nrow = lenx)
foo           <- mod$ID %*% mvn.p_matrix(mod, X = x[1,])
sumfoo        <- sum(foo)
lscale        <- log(sumfoo)
foo           <- foo/sumfoo
lalpha[1,]    <- lscale+log(foo)
for (i in 2:(lenx))
{
foo          <- foo%*%mod$TPM %*% mvn.p_matrix(mod, X = x[i,])
sumfoo       <- sum(foo)
lscale       <- lscale+log(sumfoo)
foo          <- foo/sumfoo
lalpha[i,]   <- log(foo)+lscale
}
return(lalpha)
}
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
u <- sum(phi)
l <- 0 #log likelihood
forw <- matrix(nrow = t, ncol =dim(mod$TPM)[1] )
for(i in 1:(t-1)){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
forw[i,] <- v
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
print(log(forw))
return(-l)
}
nlm_mod
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
for(i in 1:(t)){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
forw[i,] <- v
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
u <- sum(phi)
l <- 0 #log likelihood
forw <- matrix(nrow = t, ncol =dim(mod$TPM)[1] )
for(i in 1:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
forw[i,] <- v
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
print(log(forw))
return(-l)
}
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
print(forw)
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
u <- sum(phi)
l <- 0 #log likelihood
forw <- matrix(nrow = t, ncol =dim(mod$TPM)[1] )
for(i in 1:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
forw[i,] <- v
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
print(forw)
return(-l)
}
mvn.HMM_mllk(mvn.n2w(nlm_mod, T), tmatrix, 3, 4, T)
#Minus Log Likelihood Function
#X: matrix with each column being a separate variable, each row an observation
#of each variable at the same time (t x n), t = # of times observed, n = # of variables for multivariate norm
mvn.HMM_mllk <- function(parvec, X, m, n, stationary){
mod <- mvn.w2n(parvec, m, n, stationary)
print(mod)
tpm <- mod$TPM
t <- dim(X)[1] # number of observations
phi <- mod$ID
l <- 0 #log likelihood
for(i in 1:t){
v <- phi %*% tpm %*% mvn.p_matrix(mod, X[i,])
forw[i,] <- v
u <- sum(v)
l <- l + log(u)
phi <- v/u #rescaled vector of forward probabilities
}
return(-l)
}
#gen_mod is model from generated data
#nlm_mod is model fitted to real world data
#mvn.cdf gives cdf values for all observered values
#histogram and qqnorm of nlm_mod:
nlm_resids <- mvn.cdf(tmatrix, nlm_mod) #tmatrix is matrix of returns for 100 days
hist(qnorm(nlm_resids))
hist(qnorm(nlm_resids))
#gen_mod is model from generated data
#nlm_mod is model fitted to real world data
#mvn.cdf gives cdf values for all observered values
#histogram and qqnorm of nlm_mod:
nlm_resids <- mvn.cdf(tmatrix, nlm_mod) #tmatrix is matrix of returns for 100 days
hist(qnorm(nlm_resids))
### A.1.9 Conditional probabilities
#==Conditional probability that observation at time t equals
#  xc, given all observations other than that at time t.
#  Note: xc is a vector and the result (dxc) is a matrix.
mvn.cdf <- function(x,mod){
lenx         <- dim(x)[1]
m         <- dim(mod$TPM)[1]
dxc       <- matrix(NA,nrow=lenx,ncol=1)
Px        <- matrix(NA,nrow=lenx,ncol=m)
for (j in 1:lenx){ Px[j,] <- mvn.cumul_vec(mod, x[j,])}
#print(Px)
la        <- mvn.lforward(x,mod)
lb        <- mvn.lbackward(x,mod)
la        <- rbind(log(mod$ID),la)
lafact    <- apply(la,1,max)
lbfact    <- apply(lb,1,max)
for (i in 1:lenx)
{
foo      <- (exp(la[i,]-lafact[i])%*%mod$TPM)*exp(lb[i,]-lbfact[i])
foo      <- foo/sum(foo)
#if(i ==1){print(foo)}
dxc[i]  <- sum(Px[i,]%*%t(foo))
}
return(dxc)
}
#gen_mod is model from generated data
#nlm_mod is model fitted to real world data
#mvn.cdf gives cdf values for all observered values
#histogram and qqnorm of nlm_mod:
nlm_resids <- mvn.cdf(tmatrix, nlm_mod) #tmatrix is matrix of returns for 100 days
hist(qnorm(nlm_resids))
?hist
?hist
#gen_mod is model from generated data
#nlm_mod is model fitted to real world data
#mvn.cdf gives cdf values for all observered values
#histogram and qqnorm of nlm_mod:
nlm_resids <- mvn.cdf(tmatrix, nlm_mod) #tmatrix is matrix of returns for 100 days
hist(qnorm(nlm_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
#gen_mod is model from generated data
#nlm_mod is model fitted to real world data
#mvn.cdf gives cdf values for all observered values
#histogram and qqnorm of nlm_mod:
nlm_resids <- mvn.cdf(tmatrix, nlm_mod) #tmatrix is matrix of returns for 100 days
hist(qnorm(nlm_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
qqnorm(qnorm(nlm_resids))
#gen_mod is model from generated data
#nlm_mod is model fitted to real world data
#mvn.cdf gives cdf values for all observered values
#histogram and qqnorm of nlm_mod:
nlm_resids <- mvn.cdf(tmatrix, nlm_mod) #tmatrix is matrix of returns for 100 days
hist(qnorm(nlm_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
qqnorm(qnorm(nlm_resids))
qqline()
#gen_mod is model from generated data
#nlm_mod is model fitted to real world data
#mvn.cdf gives cdf values for all observered values
#histogram and qqnorm of nlm_mod:
nlm_resids <- mvn.cdf(tmatrix, nlm_mod) #tmatrix is matrix of returns for 100 days
hist(qnorm(nlm_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
#qqnorm(qnorm(nlm_resids))
qqline(qnorm(nlm_resids))
#gen_mod is model from generated data
#nlm_mod is model fitted to real world data
#mvn.cdf gives cdf values for all observered values
#histogram and qqnorm of nlm_mod:
nlm_resids <- mvn.cdf(tmatrix, nlm_mod) #tmatrix is matrix of returns for 100 days
hist(qnorm(nlm_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
qqnorm(qnorm(nlm_resids))
qqline(qnorm(nlm_resids))
qqnorm(qnorm(nlm_resids))
qqline(qnorm(nlm_resids))
gen_resids <- mvn.cdf(nlm_gen_sample, gen_mod)
hist(qnorm(nlm_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
qqnorm(qnorm(gen_resids))
qqline(qnorm(gen_resids))
qqnorm(qnorm(gen_resids))
qqline(qnorm(gen_resids))
gen_resids <- mvn.cdf(nlm_gen_sample, gen_mod)
hist(qnorm(nlm_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
qqnorm(qnorm(nlm_resids))
qqline(qnorm(nlm_resids))
#gen_mod is model from generated data
#nlm_mod is model fitted to real world data
#mvn.cdf gives cdf values for all observered values
#histogram and qqnorm of nlm_mod:
nlm_resids <- mvn.cdf(tmatrix, nlm_mod) #tmatrix is matrix of returns for 100 days
hist(qnorm(nlm_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
gen_resids <- mvn.cdf(nlm_gen_sample, gen_mod)
hist(qnorm(nlm_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
gen_resids <- mvn.cdf(nlm_gen_sample, gen_mod)
hist(qnorm(gen_resids),main = 'Histogram of Normal Pseudoresids of nlm_mod')
gen_resids <- mvn.cdf(nlm_gen_sample, gen_mod)
hist(qnorm(gen_resids),main = 'Histogram of Normal Pseudoresids of gen_mod')
hist(qnorm(gen_resids),main = 'Histogram of Normal Pseudoresids of gen_mod')
hist(qnorm(gen_resids),main = 'Histogram of Normal Pseudoresids of gen_mod')
hist(qnorm(gen_resids),main = 'Histogram of Normal Pseudoresids of gen_mod')
gen_resids <- mvn.cdf(nlm_gen_sample, gen_mod)
hist(qnorm(gen_resids),main = 'Histogram of Normal Pseudoresids of gen_mod')
library(tinytex)
setwd("~/")
tinytex::install_tinytex()
library(tinytex)
setwd("~/GitHub/St_Andrews_Final_Project_2024")
Apple <- read_csv("Apple.csv")
Microsoft <- read_csv("Microsoft.csv")
Intel <- read_csv("Intel.csv")
Meta <- read_csv("META.csv")
price_to_returns<- function(Stock){
Stock$last <- as.numeric(sub('.', '', Stock$`Close/Last`))
returns_name <- paste(deparse(substitute(Stock)), ' Returns')
output <- Stock %>%
#Get rid of earliest date
filter(Date != Stock$Date[length(Stock$Date)]) %>%
#Add the offset list of prices
mutate(day_before = Stock$last[-1])%>%
#take log of ratio of price and price of previous day
mutate(Returns = 100*(log(last) - log(day_before)))%>%
select(Date, Returns)
return(output)
}
apl <- price_to_returns(Apple)
mic <- price_to_returns(Microsoft)
tel <- price_to_returns(Intel)
met <- price_to_returns(Meta)
example_returns <- apl %>%
left_join(mic, join_by(Date)) %>%
left_join(tel, join_by(Date)) %>%
left_join(met, join_by(Date)) %>%
rename(Apple = Returns.x, Microsoft = Returns.y, Intel = Returns.x.x, Meta = Returns.y.y )
