"0","library(tinytex)"
"2","Warning: package â€˜tinytexâ€™ was built under R version 4.3.3"
"0","library(tidyverse)"
"2","â”€â”€ [1mAttaching core tidyverse packages[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€
[32mâœ”[39m [34mdplyr    [39m 1.1.2     [32mâœ”[39m [34mreadr    [39m 2.1.4
[32mâœ”[39m [34mforcats  [39m 1.0.0     [32mâœ”[39m [34mstringr  [39m 1.5.0
[32mâœ”[39m [34mggplot2  [39m 3.4.2     [32mâœ”[39m [34mtibble   [39m 3.2.1
[32mâœ”[39m [34mlubridate[39m 1.9.2     [32mâœ”[39m [34mtidyr    [39m 1.3.0
[32mâœ”[39m [34mpurrr    [39m 1.0.2     "
"2","â”€â”€ [1mConflicts[22m â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€
[31mâœ–[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31mâœ–[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
[36mâ„¹[39m Use the ]8;;http://conflicted.r-lib.org/conflicted package]8;; to force all conflicts to become errors"
"0","library(mvtnorm)"
"0","library(matlib)"
"2","Warning: package â€˜matlibâ€™ was built under R version 4.3.2"
"2","Registered S3 method overwritten by 'htmlwidgets':
  method           from         
  print.htmlwidget tools:rstudio
"
"2","
Attaching package: â€˜matlibâ€™

"
"2","The following object is masked _by_ â€˜.GlobalEnvâ€™:

    len

"
"0","library(knitr)"
"2","Warning: package â€˜knitrâ€™ was built under R version 4.3.2"
"0","#Loading Data From Generated Data Tests:"
"0","gen_data <- read.csv('Gen_Data_3_18' )"
"0","gen_data_df <- data.frame("
"0","  'vec_var' = gen_data[,2],"
"0","  'vec_mean' =  gen_data[,3],"
"0","  'el_var' =  gen_data[,4],"
"0","  'el_mean' =  gen_data[,5],"
"0"," ' code' = gen_data[,6],"
"0"," ' iterations' =  gen_data[,7]"
"0",")"
"0","gen_data_df <- gen_data_df %>% "
"0","  filter(is.na(vec_var) == F)"
"0","#Loading Model fitted to the entire data Set"
"0","big_mod <- readRDS('big_mod3state.RData')"
"0","#Loading the Returns Data Set:"
"0","example_returns <- readRDS('ExampleReturns.RData')"
"0",""
"0","#Function from Graphing Cookbook:"
"0","multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL, title) {"
"0","  library(grid)"
"0","  # Make a list from the ... arguments and plotlist"
"0","  plots <- c(list(...), plotlist)"
"0","  "
"0","  numPlots = length(plots)"
"0","  "
"0","  # If layout is NULL, then use 'cols' to determine layout"
"0","  if (is.null(layout)) {"
"0","    # Make the panel"
"0","    # ncol: Number of columns of plots"
"0","    # nrow: Number of rows needed, calculated from # of cols"
"0","    layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),"
"0","                     ncol = cols, nrow = ceiling(numPlots/cols))"
"0","  }"
"0","  "
"0","  if (numPlots==1) {"
"0","    print(plots[[1]])"
"0","    "
"0","  } else {"
"0","    # Set up the page"
"0","    grid.newpage()"
"0","    pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))"
"0","    "
"0","    # Make each plot, in the correct location"
"0","    for (i in 1:numPlots) {"
"0","      # Get the i,j matrix positions of the regions that contain this subplot"
"0","      matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))"
"0","      "
"0","      print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,"
"0","                                      layout.pos.col = matchidx$col))"
"0","    }"
"0","  }"
"0","}"
"0","source('MVN_support_functions.R')"
"0","source('MVN_Forward_and_Backward.R')"
"0","source('MVN_single_Pseudoresids.R')"
"0","source('MVN_Conditional.R')"
"0","ret_matrix <- matrix("
"0","  data = c(example_returns$Apple, example_returns$Microsoft, example_returns$Intel, example_returns$Meta),"
"0","  ncol = 4"
"0",")"
"0",""
